# Form implementation generated from reading ui file 'main.py'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QMainWindow, QWidget, QPushButton, QSlider, QLabel, QSpacerItem
from PyQt6 import QtWidgets, QtCore
import sys
import json
import pyqtgraph as pg
from untitled import Ui_MainWindow
from Methods_msyql import placeholdOrText, getNowDateAndTime, histGraph4Pg, transferTimestamp2FormatStr
from commonMethods_zhaozl_green.toolbox.Method_mysqlOperator import mysqlOperator
import pymysql


class mywindow(QMainWindow,Ui_MainWindow):
    def __init__(self):
        super(mywindow,self).__init__()
        self.setupUi(self)
        # 调用配置文件,形成联动数据库与数据表清单的选项
        with open("./config_database_table.json", "r", encoding="utf8") as f:
            self.databases_content = json.loads(f.read())
        f.close()

        self.mysqlTestMsgBoxContentList = []  # 数据库测试页信息框记录
        self.dataProcessMsgBoxContentList = []  # 数据处理页信息框记录

        self.retrieveData.clicked.connect(self._retrieve_data_from_mysql)
        self.mysql_connection_test.clicked.connect(self._mysql_connection_test)
        self.databaseName_edit.currentIndexChanged.connect(self._changeTableNameAccording2DatabaseName)
        self.retrievedFail = False
        # 初始化 [数据库测试]Tab页 绘图区域
        self.win = pg.GraphicsLayoutWidget()
        self.gridLayout_2.addWidget(self.win)
        # 初始化 [数据处理]Tab页 绘图区域左
        self.win2 = pg.GraphicsLayoutWidget()
        self.layout_lines.addWidget(self.win2)
        # 初始化 [数据处理]Tab页 绘图区域右
        self.win3 = pg.GraphicsLayoutWidget()
        self.layout_hists.addWidget(self.win3)
        # 查询各测点数据的极值记录
        self.minimums = []
        self.maximums = []

        self.extreamSliderLayout.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.selectedSample_timeStart = None
        self.selectedSample_timeEnd = None

        self._retrievedData = None
        self.genSqlCriticalParamBtn.clicked.connect(self.__genSqlCriticalParam)  # 生成SQL命令关键参数

    def __getMysqlParams(self):
        self.host = placeholdOrText(self.host_edit)
        self.port = placeholdOrText(self.port_edit)
        self.user = placeholdOrText(self.user_edit)
        self.password = placeholdOrText(self.password_edit)
        self.databaseName = self.databaseName_edit.currentText()
        self.tableName = self.tableName_edit.currentText()
        self.startDateStr = self.startDate.date().toPyDate()
        self.startTimeStr = self.startTime.time().toPyTime()
        self.endDateStr = self.endDate.date().toPyDate()
        self.endTimeStr = self.endTime.time().toPyTime()

    def __update_widget_mysqlTestMsgBox(self, content):  # 更新【数据库测试】页信息框中的内容
        self.mysqlTestMsgBoxContentList.append(content)
        _cache = self.mysqlTestMsgBoxContentList.copy()
        _cache.sort(reverse=True)
        self.widget_mysqlTestMsgBox.setText("\n".join(_cache))

    def __retrieveDataFromMysql(self):
        obj = mysqlOperator(databaseName=self.databaseName, tableName=self.tableName,
                            host=self.host, port=int(self.port),
                            userID=self.user, password=self.password)
        self.condition = f"(时间戳>=\'{self.startDateStr} {self.startTimeStr}\') and (时间戳<=\'{self.endDateStr} {self.endTimeStr}\')"
        if len(self.filters.text()) > 1:
            self.condition = self.condition + " " + self.filters.text()
        try:
            self._retrievedData = obj.selectData(condition=self.condition, content=self.content)
            self.retrievedFail = False
        except:
            self.retrievedFail = True

    def _mysql_connection_test(self):
        self.__getMysqlParams()
        databaseName = self.databaseName_edit.currentText()
        access2Mysql = False
        try:
            __con__ = pymysql.connect(host=self.host, port=int(self.port), db=databaseName,
                                      user=self.user, passwd=self.password, charset='utf8mb4')
            access2Mysql = True
        except:
            pass
        self.__update_widget_mysqlTestMsgBox(f"时间: {getNowDateAndTime()}  MySQL通讯状态: {access2Mysql} \n{'='*10}")

    def _retrieve_data_from_mysql(self):
        self.__getMysqlParams()
        self.content = "时间戳,发电机定子铁芯铜屏蔽温度1_汽端,冷却器出口冷风温度1_汽端" if len(self.mysqlRetrieveContent.text()) == 0 else self.mysqlRetrieveContent.text()
        self.content = self.content if "时间戳" in self.content else "时间戳," + self.content

        if self.content == "*":
            self.__updateTextBrowser(f"时间: {getNowDateAndTime()}  查询命令错误: 不允许为 * \n{'=' * 10}")
        elif self.content == "count(*)":
            self.__retrieveDataFromMysql()
            _msg = self._retrievedData["inspectedDataSize"].values.flatten().tolist()[0]
            self.__updateTextBrowser(f"时间: {getNowDateAndTime()}  数据库样本数: {_msg} \n{'=' * 10}")
        else:
            self.__retrieveDataFromMysql()
            if not self.retrievedFail:
                # 查询各测点数据的极值记录
                self.minimums = []
                self.maximums = []
                _retrievedData = self._retrievedData.dropna(axis="columns")
                _retrievedTime = _retrievedData["时间戳"].values.flatten().tolist()
                self.selectedSample_timeStart = _retrievedTime[0]
                print(self.selectedSample_timeStart)
                self.selectedSample_timeEnd = _retrievedTime[-1]
                # 更新信息框
                self.__updateTextBrowser(f"时间: {getNowDateAndTime()}  返回非空样本数: {len(_retrievedData)} \n{'=' * 10}")
                # 更新[数据库测试]Tab页 绘图区域控件
                self.win.clear()
                # 更新[数据处理]Tab页左 绘图区域控件
                self.win2.clear()
                # 更新[数据处理]Tab页右 绘图区域控件
                self.win3.clear()

                # 绘图[数据库测试]Tab页
                for item in _retrievedData:
                    if "时间戳" not in item:
                        _cache = self.win.addPlot(title=item)
                        _cache.plot(_retrievedData[item].values.tolist(), name=item, pen="w")
                        self.win.nextRow()
                # 绘图[数据处理]左Tab页
                for item in _retrievedData:
                    if "时间戳" not in item:
                        self.win2.addPlot(y=_retrievedData[item].values.tolist(), title=item, pen="r")
                        self.win2.nextRow()
                # 绘图[数据处理]右Tab页
                for i, item in enumerate(_retrievedData):
                    if "时间戳" not in item:
                        _data = _retrievedData[item].values.tolist()
                        xs, ys, gap = histGraph4Pg(_data, 200)
                        _bar = pg.BarGraphItem(x=xs, y1=ys, width=gap, brush="r")
                        _barPlot = self.win3.addPlot()
                        _barPlot.addItem(_bar)
                        self.win3.nextRow()
                        self.__addAdjustButton(_data, i, item)
                    else:
                        self.minimums.append(0)
                        self.maximums.append(0)
            else:
                self.__updateTextBrowser(f"时间: {getNowDateAndTime()}  查询失败,调用测点名称不存在或筛选条件不正确: select {self.content} where {self.condition} \n{'=' * 10}")

    def _changeTableNameAccording2DatabaseName(self):
        self.tableName_edit.clear()
        tableNames = self.databases_content[self.databaseName_edit.currentText()]
        for item in tableNames:
            self.tableName_edit.addItem(item)

    def __changeExtreamValue(self, seq, kind, newValue):
        if kind == "minimum":
            self.minimums[seq] = newValue
        else:
            self.maximums[seq] = newValue

    def __valueChange(self, msg, seq, value):
        _min, _max = self.minimums[seq], self.maximums[seq]
        if msg == "_maximumSlider":
            _newMax = (_max - _min) / 100 * value + _min
            self.findChild(QLabel, f"data_{seq}_maxiLabel").setText("max: %8.4f "%_newMax)
        else:
            _newMin = (_max - _min) / 100 * value + _min
            self.findChild(QLabel, f"data_{seq}_miniLabel").setText("max: %8.4f "%_newMin)

    def __addAdjustButton(self, data, seq, itemName):
        _dataMin = min(data)
        _dataMax = max(data)
        self.minimums.append(_dataMin)
        self.maximums.append(_dataMax)
        # 上部间隔
        vSpacerUpper = QSpacerItem(20, 20)
        self.extreamSliderLayout.addItem(vSpacerUpper)
        # 最大值标签
        _maxiLabel = QLabel()
        _maxiLabel.setText("max: %8.4f "%self.maximums[seq])
        _maxiLabel.setObjectName(f"data_{seq}_maxiLabel")
        self.extreamSliderLayout.addWidget(_maxiLabel)
        # 最大值调节控件
        _maximumSlider = QSlider()
        _maximumSlider.setOrientation(QtCore.Qt.Orientation.Vertical)
        _maximumSlider.setObjectName(f"data_{seq}_maxiSlider")
        _maximumSlider.setValue(100)
        _maximumSlider.setMaximum(100)
        _maximumSlider.setMinimum(0)
        _maximumSlider.setSingleStep(1)
        _maximumSlider.setPageStep(10)
        _maximumSlider.valueChanged.connect(lambda: self.__valueChange("_maximumSlider", seq, _maximumSlider.value()))
        _maximumSlider.sliderReleased.connect(lambda: self.refreshDataTransferGraph(seq))
        self.extreamSliderLayout.addWidget(_maximumSlider)
        # 最小值调节控件
        _minimumSlider = QSlider()
        _minimumSlider.setOrientation(QtCore.Qt.Orientation.Vertical)
        _minimumSlider.setObjectName(f"data_{seq}_miniSlider")
        _minimumSlider.setValue(0)
        _minimumSlider.setMaximum(100)
        _minimumSlider.setMinimum(0)
        _minimumSlider.setSingleStep(-1)
        _minimumSlider.setPageStep(-10)
        _minimumSlider.valueChanged.connect(lambda: self.__valueChange("_minimumSlider", seq, _minimumSlider.value()))
        _minimumSlider.sliderReleased.connect(lambda: self.refreshDataTransferGraph(seq))
        self.extreamSliderLayout.addWidget(_minimumSlider)
        # 最小值标签
        _miniLabel = QLabel()
        _miniLabel.setText("min: %8.4f "%self.minimums[seq])
        _miniLabel.setObjectName(f"data_{seq}_miniLabel")
        self.extreamSliderLayout.addWidget(_miniLabel)
        # 下部间隔
        vSpacerLower = QSpacerItem(20, 20)
        self.extreamSliderLayout.addItem(vSpacerLower)
        # 更新信息框
        _stat_max = _dataMax
        _stat_min = _dataMin
        _str1 = "时间: %s  测点名称: %s\n样本时间范围: %s ~ %s"%(getNowDateAndTime(), itemName, transferTimestamp2FormatStr(self.selectedSample_timeStart), transferTimestamp2FormatStr(self.selectedSample_timeEnd))
        _str2 = "统计信息:\n   Max-%8.4f   Min-%8.4f\n   25%%-%8.4f   75%%-%8.4f\n   Mode-%8.4f   Avg-%8.4f\n"%(_stat_max, _stat_min, np.quantile(data, 0.25), np.quantile(data, 0.75), np.median(data), np.average(data))
        self.refreshTextBrowser_dataTransfer(_str1 + "\n" + _str2)

    def __update_widget_dataProcessMsgBox(self, msg):  # 更新数据处理页信息框内容
        self.dataProcessMsgBoxContentList.append(msg)
        _cache = self.dataProcessMsgBoxContentList.copy()
        _cache.sort(reverse=True)
        self.textBrowser_dataTransfer.setText("================================\n".join(_cache))

    def refreshDataTransferGraph(self, seq):
        self.win2.clear()
        self.win3.clear()
        columns = self._retrievedData.columns
        _targetData = self._retrievedData[columns[seq]]
        _targetMax = self.findChild(QLabel, f"data_{seq}_maxiLabel").text().replace(" ", "").split(":")[1]
        _targetMin = self.findChild(QLabel, f"data_{seq}_miniLabel").text().replace(" ", "").split(":")[1]
        _filteredLeftLocs = np.where((np.asarray(_targetData)<=float(_targetMax))&(np.asarray(_targetData)>=float(_targetMin)))
        _retrievedData = self._retrievedData.iloc[_filteredLeftLocs[0].flatten().tolist()]
        _filteredLeftTimes = _retrievedData["时间戳"].values.flatten().tolist()
        self.selectedSample_timeStart = _filteredLeftTimes[0]
        self.selectedSample_timeEnd = _filteredLeftTimes[-1]
        # 绘图[数据处理]左Tab页
        for item in _retrievedData:
            if "时间戳" not in item:
                self.win2.addPlot(y=_retrievedData[item].values.tolist(), title=item, pen="r")
                self.win2.nextRow()
        # 绘图[数据处理]右Tab页
        for i, item in enumerate(_retrievedData):
            if "时间戳" not in item:
                _data = _retrievedData[item].values.tolist()
                xs, ys, gap = histGraph4Pg(_data, 200)
                _bar = pg.BarGraphItem(x=xs, y1=ys, width=gap, brush="r")
                _barPlot = self.win3.addPlot()
                _barPlot.addItem(_bar)
                self.win3.nextRow()
                # 更新信息框
                _stat_max = max(_data)
                _stat_min = min(_data)
                _str1 = "时间: %s  测点名称: %s\n样本时间范围: %s ~ %s" % (getNowDateAndTime(), item, transferTimestamp2FormatStr(self.selectedSample_timeStart), transferTimestamp2FormatStr(self.selectedSample_timeEnd))
                _str2 = "统计信息:\n   Max-%8.4f   Min-%8.4f\n   25%%-%8.4f   75%%-%8.4f\n   Mode-%8.4f   Avg-%8.4f\n" % (_stat_max, _stat_min, np.quantile(_data, 0.25), np.quantile(_data, 0.75), np.median(_data), np.average(_data))
                self.__update_widget_dataProcessMsgBox(_str1 + "\n" + _str2)
        # 将筛选出的数据提取至mat文件
        self._retrievedData = _retrievedData

    def __genSqlCriticalParam(self):
        content = self.content.split(",")
        for i in range(1, len(content)):
            _targetMax = self.findChild(QLabel, f"data_{i}_maxiLabel").text().replace(" ", "").split(":")[1]
            _targetMin = self.findChild(QLabel, f"data_{i}_miniLabel").text().replace(" ", "").split(":")[1]
            self.refreshTextBrowser_dataTransfer("Select SELECTED_COLUMNS from %s.%s where (时间戳>=\'%s %s\') and (时间戳<=\'%s %s\') and (%s >= %s) and (%s <= %s)\n"%(self.databaseName, self.tableName, self.startDateStr, self.startTimeStr, self.endDateStr, self.endTimeStr, content[i], _targetMin, content[i], _targetMax))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    myWindow = mywindow()
    myWindow.show()
    sys.exit(app.exec())